(function(c, h, n, t) {
	function b(a, d) {
		this.options = d || {};
		this.options.scope = this.options.scope || g.Parent;
		this.options.className = this.options.className || "stick";
		this.options.top = this.options.top || 0;
		this.options.extraHeight = this.options.extraHeight || 0;
		this.element = c(a);
		this.stick = e.None;
		this.spacer = c("<div />");
		this.spacer[0].id = a.id;
		this.spacer[0].className = a.className;
		this.spacer[0].style.cssText = a.style.cssText;
		this.spacer.addClass("jquery-stickit-spacer");
		this.spacer.css({
			display : "none",
			visibility : "hidden"
		});
		this.spacer.insertAfter(this.element);
		"static" == this.element.parent().css("position") && this.element.parent().css("position", "relative");
		this.bound();
		this.precalculate();
		this.store()
	}

	function p() {
		c(":jquery-stickit").each(function() {
			c(this).data("jquery-stickit").resize()
		})
	}

	function q() {
		c(":jquery-stickit").each(function() {
			c(this).data("jquery-stickit").locate()
		})
	}

	var k = -1 != navigator.userAgent.indexOf("MSIE 7.0"),
	    l = k ? -2 : 0,
	    g = h.StickScope = {
		Parent : 0,
		Document : 1
	},
	    e = {
		None : 0,
		Fixed : 1,
		Absolute : 2
	},
	    m = !1;
	c.expr[":"]["jquery-stickit"] = function(a) {
		return !!c(a).data("jquery-stickit")
	};
	b.prototype.store = function() {
		var a = this.element[0];
		this.origStyle = {
			width : a.style.width,
			position : a.style.position,
			left : a.style.left,
			top : a.style.top,
			bottom : a.style.bottom,
			zIndex : a.style.zIndex
		}
	};
	b.prototype.restore = function() {
		this.element.css(this.origStyle)
	};
	b.prototype.bound = function() {
		var a = this.element;
		if (k || "border-box" != a.css("box-sizing"))
			this.extraWidth = 0;
		else {
			var d = parseInt(a.css("border-left-width")) || 0,
			    c = parseInt(a.css("border-right-width")) || 0,
			    r = parseInt(a.css("padding-left")) || 0,
			    b = parseInt(a.css("padding-right")) || 0;
			this.extraWidth = d + c + r + b
		}
		this.margin = {
			top : parseInt(a.css("margin-top")) || 0,
			bottom : parseInt(a.css("margin-bottom")) || 0,
			left : parseInt(a.css("margin-left")) || 0,
			right : parseInt(a.css("margin-right")) || 0
		};
		this.parent = {
			border : {
				bottom : parseInt(a.parent().css("border-bottom-width")) || 0
			}
		}
	};
	b.prototype.precalculate = function() {
		this.baseTop = this.margin.top + this.options.top;
		this.basePadding = this.baseTop + this.margin.bottom;
		this.baseParentOffset = this.options.extraHeight - this.parent.border.bottom
	};
	b.prototype.reset = function() {
		this.stick = e.None;
		this.spacer.hide();
		this.spacer.css("width", "");
		this.restore();
		this.element.removeClass(this.options.className)
	};
	b.prototype.setAbsolute = function(a) {
		this.stick == e.None && this.element.addClass(this.options.className);
		this.stick = e.Absolute;
		this.element.css({
			width : this.element.width() + this.extraWidth + "px",
			position : "absolute",
			top : this.origStyle.top,
			left : a + "px",
			bottom : -this.options.extraHeight + "px",
			"z-index" : 99
		})
	};
	b.prototype.setFixed = function(a) {
		this.stick == e.None && this.element.addClass(this.options.className);
		this.stick = e.Fixed;
		this.element.css({
			width : this.element.width() + this.extraWidth + "px",
			position : "fixed",
			top : this.options.top + "px",
			left : a + "px",
			bottom : this.origStyle.bottom,
			"z-index" : 1000
		})
	};
	b.prototype.locate = function() {
		var a,
		    d,
		    c,
		    b = this.element,
		    f = this.spacer;
		switch(this.stick) {
		case e.Fixed:
			a = f[0].getBoundingClientRect();
			d = a.top - this.baseTop;
			0 <= d ? this.reset() : this.options.scope == g.Parent && ( a = b.parent()[0].getBoundingClientRect(), a.bottom + this.baseParentOffset <= b.outerHeight() + this.basePadding && this.setAbsolute(this.spacer.position().left));
			break;
		case e.Absolute:
			a = f[0].getBoundingClientRect();
			d = a.top - this.baseTop;
			c = a.left - this.margin.left;
			0 <= d ? this.reset() : ( a = b.parent()[0].getBoundingClientRect(), a.bottom + this.baseParentOffset > b.outerHeight() + this.basePadding && this.setFixed(c + l));
			break;
		default:
			a = b[0].getBoundingClientRect();
			d = a.top - this.baseTop;
			if (0 <= d)
				break;
			f.height(b.height());
			f.show();
			c = a.left - this.margin.left;
			this.options.scope == g.Document ? this.setFixed(c) : b.parent()[0].getBoundingClientRect().bottom + this.baseParentOffset <= b.outerHeight() + this.basePadding ? this.setAbsolute(this.element.position().left) : this.setFixed(c + l);
			f.width() || f.width(b.width())
		}
	};
	b.prototype.resize = function() {
		this.bound();
		this.precalculate();
		if (this.stick != e.None) {
			var a = this.element,
			    b = this.spacer;
			a.width(b.width());
			b.height(a.height());
			this.stick == e.Fixed && ( b = this.spacer[0].getBoundingClientRect().left - this.margin.left, a.css("left", b + "px"));
			this.locate()
		}
	};
	c.fn.stickit = function(a) {
		this.each(function() {
			var d = new b(this, a);
			c(this).data("jquery-stickit", d);
			d.locate()
		});
		m || ( m = !0, c(n).ready(function() {
			c(h).bind("resize", p).bind("scroll", q)
		}));
		return this
	}
})(jQuery, window, document);
